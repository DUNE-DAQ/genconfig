
usage: genconfig [ -h ] [ -d directory ] [ -n namespace] [ -c class]* file.schema.xml+

	-h 	  	print help message
	-d <dir>  	generate output in <dir> directory
	-n <name> 	generated code lives in <name> namespace
        -i <dir>        generate header files in <dir>, include "<dir>/<file.h>"
	-c <class> 	generate only code for <class> (can be repeated)
			default is to generate code for all classes
			in all schema files

Mapping:

	Attributes are mapped to appropriate primitive types of C++.
	Relations are mapped to pointers to objects.

	An accessor function is generated for each attribute and
	relation. 

        Multipe attributes or relations a mapped to a vector
        of objects. Those vectors should not be copied (although
        you can), but accessed via operator[] or iterators:

	for(size_t i = 0; i < obj.attr().size(); i++) {
		int x = obj.attr()[i];
        }

	or like this for relations of type 'Relation'

	for(RelationIterator it = obj.rel().begin(); 
	    it != obj.rel().end(); ++it) {
	    const Relation *p = *it;
        }

	For each generated class type 'X' there is a typedef
	for 'XIterator' to access multiple relations to that type.

Accessing objects:

	Objects can be directly accessed via a 'Configuration'
	object:

		const MyData *myData = conf.get<MyData>("name");

	or
		std::vector<const MyData*> mydata = conf.get<MyData>();

	to get all objects of the given type. When the
	database is unloaded (or destroyed) all objects are
	automatically freed. The user should not delete any
	objects himself (actually the destructor is private,
	so he can't...)

--------------------------------------------------------------------------

To test this package, type 'make' first, then go to the 'test' directory
and type
   % ../${CMTCONFIG}/genconfig.exe okstest.schema.xml

followed by a 'make test' in 'cmt'. 

   % cd ../test
   % setenv TDAQ_DB_SCHEMA okstest.schema.xml
   % ../${CMTCONFIG}/test_gen.exe okstest.data.xml

Output should be:


Found 'primitive'
TestPrimitive
prim.uc  = 0
prim.b   = 1
prim.us  = 1234
prim.ss  = -1234
prim.ui  = 123456
prim.si  = -123456
prim.f   = 3.141
prim.d   = -31.41
prim.str =
Found 'multiple'
TestMultiple
mult.ui[0] = 1234
mult.ui[1] = 5678
mult.str[0] = hello
mult.str[1] = world
Found 'relation'
TestRelation
TestPrimitive
prim.uc  = 0
prim.b   = 1
prim.us  = 1234
prim.ss  = -1234
prim.ui  = 123456
prim.si  = -123456
prim.f   = 3.141
prim.d   = -31.41
prim.str = hello world
TestMultiple
mult.ui[0] = 1234
mult.ui[1] = 5678
mult.str[0] = hello
mult.str[1] = world
TestMultiple
mult.ui[0] = 1
mult.ui[1] = 2
mult.str[0] = how
mult.str[1] = are
mult.str[2] = you
